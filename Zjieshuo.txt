首页系统：

搜索系统：（solr、RabbitMQ()）

详情系统：（批量生成静态页面、多线程、redis缓存）
           redis（缓存跟新策略、热点key失效问题、分布式锁、缓存穿透流量攻击、缓存雪崩）



注册系统：(register)
    1.注册页面-->controller交互 存入数据库
    2、controller同时-->发送邮件系统（交换机、列队）

发送邮件系统：(email)
    公共类  提供静态常亮的交换机名称 和 列队名称
    1.生产者端
        a、Re
    2、

登录系统（sso）：单点登录 （在某一个点录后，其他系统均可以检测的到）
     3个思考   1、登录认证  通过之后、保存凭证
               2、其他系统验证凭证
               3、返回的是上一个页面
     方案一 ：
         登录页面：静态资源+html页面
         登录认证：数据库校验  让后保存到redis中
         保存凭证：（原先的方式  session.setAttibute("user",user);  会话级cookie 一搬用于系统本身的共享 不适用多系统间的共享  各系统复制session耗内存）
                   解决一：采用公共的服务器保存凭证信息user:token:uuid--user  保存到redis中(30分钟)，
                         同时创建一个cookie保存user:token:uuid 写到浏览器客户daunt，为了便于找到redis的凭证，若通过uuid在redis中找到对应的user，则处于登录状态

         登录状态的认证接口：检查登录状态 根据cookie中的uuid 在redis中找到对应的user  并返回user
         注销 接口： 删除redis凭证 和 将cookie中的user:token:uuid 有效期设置为0（即删除）
     方案二：实现单点登录 （JWT令牌   基于JWT的Token认证机制 服务端无需保存凭证信息，这种也叫无状态方案） （JWT组成 头部、载荷、签名）
         编写JWT工具类
         前后端交互控制： 引入JWT依赖

     *问题 ：1、解决访问跨域请求问题 （跨域，解决浏览器安全策略、同源策略（协议域名端口））
                    ajax默认不支持非同源的访问 通过jsonp来实现 或者spring的注解@CrossOrigin来实现
                        1、jsop  2、ajax+jsop  3、ajax+@CrossOrigin
            2、解决同父域的跨域问题
                 cookie.setDomain("qf.com");

            3、解决跳回原页面的问题
                原页面refer——》登录页面-获得原页面的头部信息referer---》登录判断 referer---》原页面

                Referer 是  HTTP  请求header 的一部分，当浏览器（或者模拟浏览器行为）向web 服务器发送请求的时候，
                        头信息里有包含  Referer  。比如我在www.google.com 里有一个www.baidu.com 链接，
                        那么点击这个www.baidu.com ，它的header 信息里就有:  Referer=http://www.google.com



购物车系统：
    1-商品详情页面-->购物车控制层 controller （列队消息）  
    2-购物车控制层-->购物车service接口
    3-购物车接口的实现serviceImpl-->mapper  （CRUD方法  添加到数据库和缓存redis ）同时需要检测登录状态 未登录则保存在
    4-购物车展示页面   （提供CRUD 按钮  商品详情按钮  付款按钮）
    5-付款按钮 检测登录转态,  登录了才能跳转到付款页面，未登录则跳转到登录界面

    1、购物车实体类： 这里放在api层（未登录情况下）  entity层（登录情况下）
    2、购物车ICartService接口 (提供CRUD方法)
    3、CartServiceImpl实现（2个登录状态。 需要进行排序，先后顺序）  dubbo/redis/api 的依赖和配置 、
        通过登录状态检测 判断是否登录  cookie中de user：token：uuid
        *游客登录：
            C:添加的商品生成唯一标识符uuid,存入redis缓存中（hash存入），
            R:查看购物车  需要采用排序器 继承Comparable
            U:修改
            D:删除

        *用户登录：(合并购物车)  什么时候合并
             登录系统登录成功就和合并购物车，这里需要注意的是怎么携带cookie(通过请求的头部信息)
    4、web层 :引入dubbo依赖和配置
         a、购物车详情页面：静态资源+cartShow.html文件， 引入thymeleaf表达式
         b、CartController控制层：（CRUD的前后端交互控制）
         c、启动类：


订单系统：


秒杀系统：
    考虑的问题：
        独立部署，不要跟其他系统共享服务：瞬间请求量较大,流量较大，独立部署可以不影响其他系统性能，也能更好优化本系统性能
        请求控制在上游，只让有效请求进入下游
        如果调用了其他系统，需要给他设置一个保护机制，限流削峰的处理
        后端：防刷处理（黑名单），前端:控制用户在一定时间发送的请求数量
        简化商品的秒杀页面，评论信息都要做降级处理，静态化
        做好压力测试，看吞吐量，一台服务器能够承受的压力
        Nginx+tomcat 负载均衡
        Nginx处理静态资源
        CDN处理静态资源


   相应秒杀活动（）、
    定时秒杀结束任务：定时扫描数据库关闭相应秒杀活动
    秒杀的实现（重点）：
        设计接口:
    1、秒杀商品页面
        访问量，传输的文件大小影响吞吐量，
           方案一：直接查询数据库
           方案二：添加redis缓存，  采用注解的方式添加 @EnableCaching   @Cacheable(value = "product",key = "#id")
           方案三： 静态页面
        秒杀实现方案
            方案一：悲观锁（性能一般）  解决秒杀超卖问题
            方案二：乐观锁（version，高并发的情况下会出现频繁冲突,性能也一般） 基于CAS的方案来实现，
                    关键点：1 不上锁  2基于时间戳的方案，给一段固定时间抢购 3基于固定次数 3次

        业务：商家提交秒杀--》后台审批-->产生待秒杀的活动
            秒杀活动表：时间的设置（运行系统上的时间）
                       select now() 获得运行系统上的当前时间
            启动类： 注解开启秒杀任务  @EnableScheduling
            开启秒杀定时任务：cron表达式的运用、定时扫描数据库开启
            停止秒杀定时任务：

            列队：


    2、秒杀确权过程
    3、跳转到订单支付页面
    4、正常走后续的订单流程


     